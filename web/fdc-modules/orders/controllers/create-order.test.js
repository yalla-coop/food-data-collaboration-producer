import loadConnectorWithResources from '../../../connector/index.js';

jest.setTimeout(70 * 1000)

describe('Creating an order', () => {

    // it('can parse the swagger request definitions of orderlines', async () => {

    //     const json = `{
    //         "@context": "https://www.datafoodconsortium.org",
    //         "@id": "http://test.host/api/dfc/Enterprises/10000/Orders/10001/orderlines/10001-01",
    //         "@type": "dfc-b:OrderLine",
    //         "dfc-b:concerns": "http://test.host/api/dfc/Enterprises/10000/SuppliedProducts/10001",
    //         "dfc-b:partOf": "http://test.host/api/dfc/Enterprises/10000/Orders/10001",
    //         "dfc-b:hasQuantity": {
    //           "@type": "dfc-b:QuantitativeValue",
    //           "dfc-b:hasUnit": "Packet",
    //           "dfc-b:hasValue": 5
    //         },
    //         "dfc-b:Price": {
    //           "@type": "dfc-b:QuantitativeValue",
    //           "dfc-b:hasUnit": "GBP",
    //           "dfc-b:value": 19.95,
    //           "dfc-b:VATrate": 0
    //         },
    //         "dfc-b:discount": 2.95
    //       }`

    //       const connector = await loadConnectorWithResources();
    //       const imported = await connector.importOne(json);
    //       console.log(await connector.export([imported]))
    //       return imported
    // });


    // it('can parse the swagger request definitions of Order', async () => {

    //     const json = `{
    //         "@context": "https://www.datafoodconsortium.org",
    //         "@id": "http://test.host/api/dfc/Enterprises/10000/Orders/10001",
    //         "@type": "dfc-b:Order",
    //         "dfc-b:belongsTo": "http://test.host/api/dfc/Enterprises/10000/SaleSessions/10002",
    //         "dfc-b:orderNumber": "MYORDERNUM:12345",
    //         "dfc-b:hasOrderStatus": "dfc-v:Draft",
    //         "dfc-b:hasFulfilmentStatus": "dfc-v:Held",
    //         "dfc-b:hasPaymentState": "dfc-v:Unpaid",
    //         "dfc-b:hasPaymentMethod": {
    //           "@type": "dfc-b:PaymentMethod",
    //           "dfc-b:paymentMethodType": "Example Card PaymentMethod",
    //           "dfc-b:paymentMethodProvider": "Stripe",
    //           "dfc-b:hasPrice": {
    //             "@type": "dfc-b:QuantitativeValue",
    //             "dfc-b:hasUnit": "GBP",
    //             "dfc-b:value": "Â£0.27",
    //             "dfc-b:VATrate": 0
    //           }
    //         },
    //         "dfc-b:discount": 1.55,
    //         "dfc-b:OrderedBy": "http://test.host/api/dfc/Persons/10000",
    //         "dfc-b:selects": {
    //           "@type": "dfc-b:ShippingOption",
    //           "dfc-b:optionOf": "http://test.host/api/dfc/Enterprises/10000/SaleSessions/10002",
    //           "dfc-b:fee": 1.5
    //         },
    //         "dfc-b:uses": {
    //           "@type": "dfc-b:PickupOption",
    //           "dfc-b:pickedUpAt": "Our Fantastic Farm Gate"
    //         },
    //         "dfc-b:soldBy": "http://test.host/api/dfc/Enterprises/10000",
    //         "dfc-b:hasPart": "http://test.host/api/dfc/Enterprises/10000/Orders/10001/orderlines/10001-01"
    //       }`

    //       const connector = await loadConnectorWithResources();
    //       const imported = await connector.importOne(json);
    //       console.log(await connector.export([imported]))
    //       return imported
    // })



    // it('fdc order object messing around', async () => {

    //     const connector = await loadConnectorWithResources();
    //     // public createOrder(parameters: {semanticId: string, number?: string, date?: string, saleSession?: ISaleSession, client?: IAgent, lines?: IOrderLine[], doNotStore?: boolean}): IOrder
    //     //todo: The ID is generated by the caller of the API, which  means it requires validation. Also is this a url that points to the callers' API or back at the producer??
    //     //todo: What is this date? And how is it formatted? Can it be updated on subsequent puts?
    //     //todo: What is a sales Session quantity?
    //     //todo; Where does the product id go in the order line? Is it in the offer ID? Or does the offer have to link to a supplied product? What is an offer id?

    //     const order = connector.createOrder({
    //         semanticId: 'http://test.host/api/dfc/Enterprises/10000/Orders/10001',
    //         number: 'order-num',
    //         date: '2024-03-14T01:00:00+01:00',
    //         salesSession: connector.createSaleSession({
    //             semanticId: 'http://test.host/api/dfc/Enterprises/10000/SaleSessions/10002',
    //             beginDate: '2024-03-14T01:00:00+01:00',
    //             endDate: '2024-03-21T00:59:59+01:00',
    //             quantity: 5,
    //             offers: []
    //         }),
    //         client: null,
    //         lines: [
    //             connector.createOrderLine({
    //                 semanticId: 'http://test.host/api/dfc/Enterprises/10000/Orders/10001/orderlines/10001-01',
    //                 quantity: 5,
    //                 price: connector.createPrice({value: 5, unit: connector.MEASURES.UNIT.CURRENCYUNIT.EURO}),
    //                 offer: connector.createOffer({
    //                     semanticId: "http://myplatform.com/offer1",
    //                     offeredItem: connector.createSuppliedProduct({semanticId: "http://myplatform.com/1234567",})
    //                 })

    //             }),
    //             connector.createOrderLine({
    //                 semanticId: 'http://test.host/api/dfc/Enterprises/10000/Orders/10001/orderlines/10001-02',
    //                 quantity: 5,
    //                 price: connector.createPrice({value: 5, unit: connector.MEASURES.UNIT.CURRENCYUNIT.EURO}),
    //                 offer: connector.createOffer({
    //                     semanticId: "http://myplatform.com/offer2",
    //                     offeredItem: connector.createSuppliedProduct({semanticId: "http://myplatform.com/12345678",})
    //                 })

    //             })
    //         ]
    //     });

    //     console.log(await connector.export([order]))
    // })

    // it('fdc order lines object messing around', async () => {

    //     const connector = await loadConnectorWithResources();

    //     const orderLines = connector.createOrderLine({
    //         semanticId: 'http://test.host/api/dfc/Enterprises/10000/Orders/10001/orderlines/10001-01',
    //         quantity: 5,
    //         price: connector.createPrice({value: 5, unit: connector.MEASURES.UNIT.CURRENCYUNIT.EURO}),
    //         offer: connector.createOffer({
    //             semanticId: "http://myplatform.com/offer1",
    //             offeredItem: connector.createSuppliedProduct({semanticId: "http://myplatform.com/1234567",})
    //         })

    //     });

    //     console.log(await connector.export([orderLines]))
    // })

});